#Problem: the trajectory that we get from the planner has no notion of time 
#Controller to track the trajectory generated by the RRT* LQR algorithm
using LinearAlgebra
using DelimitedFiles
#using Plots
using PlotlyJS
using Interpolations #used to create the spline for the reference trajectory

#number of states
nx = 6

#path of the data. //change for your path
data_path = "/home/fausto/optimal-sampling-low-thrust/orbital_planner/src/rrt_star/Output.txt"

reference_traj = readdlm(data_path, ',')

#truncate in case the file has extra lines
reference_traj = reference_traj[:,1:nx]

#assume that dt between each point is 1 second
#dt = 1

#works with Plots.jl
# function plot_cube!(x_range, y_range, z_range)
#     plot!([x_range[1], x_range[2], x_range[2], x_range[1], x_range[1]],
#           [y_range[1], y_range[1], y_range[2], y_range[2], y_range[1]],
#           [z_range[1], z_range[1], z_range[1], z_range[1], z_range[1]],
#           color=:blue, alpha=0.3, label="", linewidth = 2)
    
#     plot!([x_range[1], x_range[2], x_range[2], x_range[1], x_range[1]],
#           [y_range[1], y_range[1], y_range[2], y_range[2], y_range[1]],
#           [z_range[2], z_range[2], z_range[2], z_range[2], z_range[2]],
#           color=:blue, alpha=0.8, label="",  linewidth = 2)
    
#     plot!([x_range[1], x_range[1]],
#           [y_range[1], y_range[1]],
#           [z_range[1], z_range[2]],
#           color=:blue, alpha=0.8, label="",  linewidth = 2)
    
#     plot!([x_range[2], x_range[2]],
#           [y_range[1], y_range[1]],
#           [z_range[1], z_range[2]],
#           color=:blue, alpha=0.8, label="",  linewidth = 2)
    
#     plot!([x_range[1], x_range[1]],
#           [y_range[2], y_range[2]],
#           [z_range[1], z_range[2]],
#           color=:blue, alpha=0.8, label="",  linewidth = 2)
    
#     plot!([x_range[2], x_range[2]],
#           [y_range[2], y_range[2]],
#           [z_range[1], z_range[2]],
#           color=:blue, alpha=0.8, label="No Fly Zone",  linewidth = 2)
# end

# Define cube dimensions. (based on the no fly zone)
x_range = [-3, -2]
y_range = [2, 2.5]
z_range = [2, 3]


#Define the asteriod center and radius
asteroid_center = [-3, 2.5, 2]
asteroid_radius = 2


# Create a 3D plot
#plotly()
#plot(title="Planned Trajectory", xlabel="X", ylabel="Y", zlabel="Z", legend=true)
#plot_cube!(x_range, y_range, z_range)

# # Display the plot
# display(plot!)

#plotting a sphere
# n = 100
# u = range(-pi, pi, length=n)
# v = range(0, pi, length=n)
# x = asteroid_radius * cos.(u) .* sin.(v) .+ asteroid_center[1]
# y = asteroid_radius * sin.(u) .* sin.(v) .+ asteroid_center[2]
# z = asteroid_radius * cos.(v) .+ asteroid_center[3]

# surface!(x, y, z, color=:red, alpha=0.3, label="Asteroid")

################################3
#works using Plots.jl with the plotly backend
# plot!(reference_traj[:,1], reference_traj[:,2], reference_traj[:,3], label="Spacecraft Trajectory", linewidth=5)
# scatter!([reference_traj[1,1]], [reference_traj[1,2]], [reference_traj[1,3]], label="Start", ms=2)
# scatter!([reference_traj[end,1]], [reference_traj[end,2]], [reference_traj[end,3]], label="End", ms=2)
# plot_cube!(x_range, y_range, z_range)

#TODO: get working
function plot_noflyzone_traj(reference_traj, x_range, y_range, z_range)

      #######################################################################
      # Define cube vertices
      vertices = [
            [x_range[1], y_range[1], z_range[1]],
            [x_range[1], y_range[2], z_range[1]],
            [x_range[2], y_range[2], z_range[1]],
            [x_range[2], y_range[1], z_range[1]],
            [x_range[1], y_range[1], z_range[2]],
            [x_range[1], y_range[2], z_range[2]],
            [x_range[2], y_range[2], z_range[2]],
            [x_range[2], y_range[1], z_range[2]]
      ]
      
      # Define cube faces
      faces = [
            [1, 2, 3, 4],
            [5, 6, 7, 8],
            [1, 2, 6, 5],
            [2, 3, 7, 6],
            [3, 4, 8, 7],
            [4, 1, 5, 8]
      ]
      
      # Extract vertices for each face
      x_faces = [vertices[i][1] for face in faces, i in face]
      y_faces = [vertices[i][2] for face in faces, i in face]
      z_faces = [vertices[i][3] for face in faces, i in face]
      
      # Create 3D plot
      plot(
            [mesh3d(x=x_faces, y=y_faces, z=z_faces, opacity=0.5)],
            layout=Layout(
            title="Cube Plot",
            scene=attr(
                  xaxis_title="X",
                  yaxis_title="Y",
                  zaxis_title="Z"
            )
            )
      )
      #######################################################################
      #plot the trajectory
      #ref = PlotlyJS.scatter3d(x=reference_traj[:,1], y=reference_traj[:,2], z=reference_traj[:,3], mode="lines", name="Spacecraft Trajectory", line=attr(width=5))
      #plot the start and final state of ref
      #initial = PlotlyJS.scatter3d(x=[reference_traj[1,1]], y=[reference_traj[1,2]], z=[reference_traj[1,3]], mode="markers", name="Start", marker=attr(size=8))
      #final = PlotlyJS.scatter3d(x=[reference_traj[end,1]], y=[reference_traj[end,2]], z=[reference_traj[end,3]], mode="markers", name="End", marker=attr(size=8))

      #plot the no fly zone
      #plot_cube!(x_range, y_range, z_range)

      #layout = Layout(title="Planned Trajectory", xaxis_title="X", yaxis_title="Y", zaxis_title="Z", legend=true)

      #PlotlyJS.plot([ref, initial, final], layout)
end




function plot_sphere_traj(reference_traj, asteriod_center, asteriod_radius)

      ref = PlotlyJS.scatter3d(x=reference_traj[:,1], y=reference_traj[:,2], z=reference_traj[:,3], mode="lines", name="Spacecraft Trajectory", line=attr(width=5))
      n = 100
      u = range(-pi, pi; length=n)
      v = range(0, pi; length=n)

      x = (asteroid_radius*cos.(u) *sin.(v)') .+ asteroid_center[1]
      y = (asteroid_radius*sin.(u) *sin.(v)') .+ asteroid_center[2]
      z = (asteroid_radius*ones(n) *cos.(v)') .+ asteroid_center[3]

      #plot the start and final state of ref
      initial = PlotlyJS.scatter3d(x=[reference_traj[1,1]], y=[reference_traj[1,2]], z=[reference_traj[1,3]], mode="markers", name="Start", marker=attr(size=8))
      final = PlotlyJS.scatter3d(x=[reference_traj[end,1]], y=[reference_traj[end,2]], z=[reference_traj[end,3]], mode="markers", name="End", marker=attr(size=8))

      earth = PlotlyJS.surface(z = z, x = x, y= y, showscale=false, surfacecolor="black", name="Asteriod")

      layout = Layout(title="Planned Trajectory", xaxis_title="X", yaxis_title="Y", zaxis_title="Z", legend=true)

      PlotlyJS.plot([ref, earth, initial, final], layout)

end

#Plot a static sphere obstacle in the relative frame along with the trajectory from the planner
#plot_sphere_traj(reference_traj, asteroid_center, asteroid_radius)

plot_noflyzone_traj(reference_traj, x_range, y_range, z_range)